<!doctype html>
<html dir="{{lang_dir}}" lang="{{lang}}">
<head>
  <meta charset="UTF-8">

  {% if noindex %}
  <meta name="robots" content="noindex">
  {% endif %}

  <meta name="google-site-verification" content="gwuWbGNeyvivSL8tB_reZOcqdPD4uMSpThoic4RNl4U" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>United for Palestine | {{ title }}</title>
  <meta name="description" content="{{description}}">
  <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ‡µðŸ‡¸</text></svg>">
  <link rel="apple-touch-icon" sizes="180x180" href="/asset/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/asset/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/asset/favicon-16x16.png">
  <link rel="manifest" href="/asset/site.webmanifest">
  <meta property="og:title" content="{{title}}"/>
  <meta property="og:type" content="article"/>
  <meta property="og:image" content="{{image}}"/>
  <meta property="og:url" content="{{url}}"/>
  <meta property="og:description" content="{{description}}"/>

  <style>

    /* External CSS */
    @import url('https://unpkg.com/simpledotcss/simple.min.css');

    @media print {
      .no-print {
        display: none !important;
      }
    }

    .display-none {
      display: none !important;
    }

    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    .card-grid {
      display: grid;                                                    /* Enable Grid layout */
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));  /* Responsive columns */
      gap: 20px;                                                      /* Space between cards */
      box-sizing: border-box;                                         /* Include padding in width calculation */
    }

    .card-grid > article {
      box-sizing: border-box;                                         /* Include padding and border in the width calculation */
    }

    .card-grid.compact > article img {
      width: 100%;
      max-height: 256px;
      object-fit: cover;
      object-position: 50% top;
    }

    :root, ::backdrop {
      --bg-transparent: #FFFFFF44;
      --accent: #007A33;
      --accent-hover: #D50032;
    }

    @media (prefers-color-scheme: dark) {
      :root,
      ::backdrop {
        --bg-transparent: #00000044;
        --accent: lightgreen;
        --accent-hover: #e5352d;
      }
    }

    * {
      outline-offset: 0.1rem;
    }

    h1 {
      font-size: 2rem;
    }

    article {
      position: relative;
      background-color: var(--bg-transparent);
    }

    a:focus {
      outline: 2px solid;
    }

    article:has(a:hover) {
      background-color: var(--accent-bg);
    }

    article:has(a:focus-within),
    article:has(a:focus) {
      outline: 2px solid;
    }

    article a {
      outline: none !important;
      z-index: 100;
    }

    article a::after {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      content: ' ';
      z-index: 100;
    }

    h2 {
      font-size: 1.4rem;
    }

    h3 {
      font-size: 1.2rem;
    }

    article footer {
      font-size: 90%;
      opacity: 0.8;
    }

    .breadcrumbs ul {
      list-style-type: none;
      padding: 0;
    }

    .breadcrumbs li {
      display: inline-block;

    }

    .breadcrumbs li::after {
      color: var(--border);
      content: " / ";
      margin: 0 5px; /* adjust spacing as needed */
    }

    @view-transition {
      navigation: auto;
    }

    .spotlight ul {
      list-style-type: none;
      padding: 0;
    }

    body {
      word-wrap: break-word;
    }

    #menu {
      z-index: 1000;
      margin: 1vw;
      position: sticky;
      top: 1vw;
      overflow-y: auto;
      max-height: 100vh;
      grid-column: 1 / -1;
    }

    @media (min-width: 180ch) {
      #menu {
        grid-column: 3;
      }
    }

    figure embed {
      width: 100%;
    }

    /* Unvisited links */
    a {
      color: var(--accent-hover) !important; /* Set unvisited links to red */
    }

    /* Visited links */
    a:visited {
      color: var(--accent) !important; /* Green for visited links */
    }

    .menu ul {
      list-style-type: none;
      padding: 0;
    }

    .menu li {
      display: inline-block;

    }

    .menu li::after {
      color: var(--border);
      content: " | ";
      margin: 0 5px;
    }

    .menu li:last-child::after {
      content: "";
    }

    a[aria-current] {
      color: var(--text) !important;
    }

    main {
      padding-top: 0;
    }


    main h1 {
      margin-top: 3rem;
    }

    .no-margin {
      margin: 0;
    }

  </style>
  <script>
    function onRef(name, cb) {
      onRef.state.push([name, cb])
    }

    onRef.state = []

    window.addEventListener('load', () => {
      onRef.state.forEach(([name, cb]) => {
        document
          .querySelectorAll(`[data-ref="${name}"]`)
          .forEach(elem => cb(elem))
      })
    }, 1000)
  </script>
</head>


<body>



<style>
  body:before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('{{image or background}}') center/cover no-repeat;
    opacity: 0.04;
    filter: blur(30px);
  }

    main {
      position: relative;
    }

    article > :last-child {
      margin-bottom: 0;
    }

    .subtle {
      opacity: 0.8;
      font-style: italic;
    }

</style>

  <main id="main" >

    {% macro currentPage(url) %}
      {% if page.url.startsWith(url) %} aria-current="page" {% endif %} href="{{url}}"
    {% endmacro %}
    {% macro currentPageExact(url) %}
      {% if page.url == url %} aria-current="page" {% endif %} href="{{url}}"
    {% endmacro %}


  <nav class="menu no-print">

    <ul>
      <li><a {{currentPageExact("/")}}>Home</a></li>
      <li><a lang="ar" {{currentPage("/ar/")}}>Ø¹Ø±Ø¨ÙŠ</a></li>
      <li><a lang="el" {{currentPage("/el/")}}>ÎµÎ»Î»Î·Î½Î¹ÎºÎ¬</a></li>
      <li><a lang="en" {{currentPage("/en/")}}>English</a></li>
    </ul>
  </nav>


  <hr class="no-margin">

  <nav class="menu no-print">
    {% block menu %}
    {% endblock %}
  </nav>

  <!--
  <nav class="breadcrumbs">
    <ul>
    {% for crumb in page.url | breadcrumb  %}
      <li>
        <a href="{{crumb.url}}">{{crumb.name}}</a>
      </li>
    {% endfor %}

    </ul>
  </nav>
  -->
    <h1>
      {{ title }}
    </h1>

    <p class="subtle">
      {% if author %}
        {{ author }} Â·
      {% endif %}
      {% if date %}
        <time>{{ date | date(lang) }}</time>
      {% endif %}
    <p>


    {% if podcast %}
    <style>
      .podcast_player {
        width: 100%;
        display: block;
      }
    </style>

    <audio class="podcast_player" src="{{ podcast.file }}" controls>
      Your browser does not support the audio element.
    </audio>


    <script>
      const audioPlayer = document.querySelector('.podcast_player');
      let userIsScrolling = false; // Track if the user is scrolling
      let isProgrammaticScroll = false; // Track if the scroll is triggered programmatically
      let scrolledToElement;

      function timeToSeconds(time) {
        const parts = time.split(':');
        let seconds = 0;

        if (parts.length === 3) {
          // HH:MM:SS format
          seconds = parseInt(parts[0], 10) * 3600 + parseInt(parts[1], 10) * 60 + parseInt(parts[2], 10);
        } else {
          // MM:SS format
          seconds = parseInt(parts[0], 10) * 60 + parseInt(parts[1], 10);
        }

        return seconds;
      }

      function scrollToTextElement(currentTime) {
        if (userIsScrolling) return;
        if (isProgrammaticScroll) return;

        const closest = Array.from(document.querySelectorAll('[data-time]')).reduce((closest, element) => {
          const dateTime = element.getAttribute('data-time');
          const elementTimeInSeconds = timeToSeconds(dateTime);

          if (elementTimeInSeconds <= currentTime) {
            if (!closest || elementTimeInSeconds > closest.time) {
              return { element, time: elementTimeInSeconds };
            }
          }
          return closest;
        }, null);

        if (closest == null) return
        if (scrolledToElement == closest.element) return;

        scrolledToElement = closest.element

        isProgrammaticScroll = true
        closest.element.scrollIntoView({ behavior: 'smooth' });
      }

      audioPlayer.addEventListener('timeupdate', () => {
        const currentTime = audioPlayer.currentTime;
        scrollToTextElement(currentTime);
      });

      function debounce(func, delay) {
        let scrollTimeout;

        return function(...args) {
          clearTimeout(scrollTimeout);
          scrollTimeout = setTimeout(() => {
            func.apply(this, args);
          }, delay);
        };
      }

      window.addEventListener('scroll', debounce(() => {
        if (isProgrammaticScroll) {
          isProgrammaticScroll = false;
          return;
        }

        userIsScrolling = true;
      }, 200));

      audioPlayer.addEventListener('play', () => {
        userIsScrolling = false;
      });

    </script>


    {% endif %}

    {{ content | safe }}



  <section class="no-print">
    <hgroup class="spotlight">
      <!-- {% block spotlight %}{% endblock %} -->

    <h1>Spotlight</h1>
    <p>
      <!-- Use the lang specific layout and block for this -->
      {{ ("/" ~ lang ~ "/spotlight.md") | markdownFile | safe }}
    </p>
    </hgroup>
  </section>

  </main>

    <a class="no-print" href="#" id="scrollTopBtn">ðŸ”»</a>

    <script>
      const scrollBtn = document.getElementById("scrollTopBtn");
      window.onscroll = function () {
        if (window.scrollY > window.innerHeight / 2) {
          scrollBtn.classList.add("show");
        } else {
          scrollBtn.classList.remove("show");
        }
      };
    </script>
    <style>

      #scrollTopBtn {
        outline: none;
        font-size: 2rem;
        transition: opacity 0.5s ease, transform 0.5s ease;
        text-decoration: none;
        opacity: 0;
        transform: rotate(0deg);
        position: fixed;
        bottom: 8rem;
        right: 0;
        padding: 1ch;
        cursor: pointer;
        z-index: 100;
        pointer-events: none;
      }

      #scrollTopBtn.show {
        opacity: 1;
        transform: rotate(180deg);
        pointer-events: auto;
      }
    </style>

  <footer class="no-print">



    <p>
      <a lang="en" {{currentPage("/en/")}}>English</a> |
      <a lang="el" {{currentPage("/el/")}}>ÎµÎ»Î»Î·Î½Î¹ÎºÎ¬</a> |
      <a lang="ar" {{currentPage("/ar/")}}>Ø¹Ø±Ø¨ÙŠ</a>
    </p>

    <p>
      <a href="mailto:crept-hurt-recount@duck.com">crept-hurt-recount@duck.com</a> |
      <a href="/feed.xml">RSS</a>
    <p>
  </footer>

  <script id="quicklink_js" async src="https://cdnjs.cloudflare.com/ajax/libs/quicklink/2.3.0/quicklink.umd.js"></script>

  <script>

    document.getElementById("quicklink_js")
      .addEventListener("load", () => {
        quicklink.listen();
      });

    window.addEventListener("popstate", function () {
      window.document.getElementById("menu").removeAttribute("open")
    });

  </script>

  {% renderOnce %}
  {% endrenderOnce %}
</body>


</html>
